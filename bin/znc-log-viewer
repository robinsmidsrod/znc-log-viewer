#!/usr/bin/env perl

use strict;
use warnings;
use feature 'say';

use Path::Class qw(dir);
use Encode qw(encode decode);
use IO::File;
use IO::Uncompress::Gunzip;

my $file_encoding = 'iso-8859-1';
my $term_encoding = 'utf-8';

my ($user, $channel, $date) = @ARGV;

my $znc_user_dir = get_znc_user_dir();
my $znc_user_map = get_znc_user_map($znc_user_dir);

# List valid users unless param matches
die(
    "Please specify a valid user to search:\n"
  . join("\n", map { to_terminal($_) } sort keys %$znc_user_map)
  . "\n"
) unless $user and exists $znc_user_map->{$user};

# Find valid channels and their associated log files for user
my $channel_map = get_channel_map( $znc_user_map->{$user}, $channel );

# List valid channels unless param matches
die(
    "Please specify a valid channel to search:\n"
  . join("\n",
      map { to_terminal($_) }
      map { $_ . " (" . scalar @{ $channel_map->{$_} } . ")" }
      sort keys %$channel_map
    )
  . "\n"
) unless $channel;

# Ensure some channels were found
die("No channels found for search '$channel'.\n")
    unless scalar keys %$channel_map;

# Show filenames that match channel and date
say join("\n",
    map { encode($term_encoding, $_) }
    map { $_->{'timestamp'} . " " . $_->{'channel'} . ": " . $_->{'message'} }
    sort { $a->{'timestamp'} cmp $b->{'timestamp'} }
    map { render_log_file($_) }
    filter_filenames( $znc_user_map->{$user}, $channel_map, $date )
);

exit;

# Specify which dir contains our ZNC user dirs
sub get_znc_user_dir {
    return dir($ENV{'HOME'}, '.znc', 'users');
}

# Create a map of ZNC users and associated log dirs
sub get_znc_user_map {
    my ($znc_user_dir) = @_;
    my %znc_user_map =
        map {
            "" . $_->relative($znc_user_dir)
              =>
            $_->subdir("moddata","log")
        }
        $znc_user_dir->children();
    return wantarray ? %znc_user_map : \%znc_user_map;
}

# Create a map of all valid channels for user based on log dir,
# filter out matching channels, if specified.
# Key: channel name
# Value: array of logfiles (unsorted)
sub get_channel_map {
    my ($log_dir, $channel_requested) = @_;
    my $channel_requested_utf8 = defined($channel_requested)
                               ? decode($term_encoding, $channel_requested)
                               : undef;
    my $re_chan_req = defined($channel_requested_utf8)
                    ? qr/\Q$channel_requested_utf8\E/i
                    : undef;
    my %channel_map;
    while ( my $file = $log_dir->next() ) {
        next unless -f $file;
        next unless -r _;
        # Check syntax of filename
        if ( $file->relative($log_dir) =~ /^(.+)_(\d{8})\.log(?:\.gz)?$/ ) {
            my $channel = $1;
            my $date = $2;
            if ( defined $channel_requested_utf8 ) {
                my $channel_utf8 = decode($file_encoding, $channel);
                next unless $channel_utf8 =~ m/$re_chan_req/;
            }
            $channel_map{$channel} = [] unless exists $channel_map{$channel};
            push @{ $channel_map{$channel} }, $file;
        }
        else {
            say STDERR "File not matching pattern: $file";
        }
    }
    return wantarray ? %channel_map : \%channel_map;
}

# Filter and sort log files based on date
# Returns array with metadata
sub filter_filenames {
    my ($log_dir, $channel_map, $date_requested) = @_;
    my $re_date_req = defined($date_requested)
                    ? qr/^\Q$date_requested\E/
                    : undef;
    my @filenames;
    foreach my $channel ( keys %$channel_map ) {
        foreach my $file ( @{ $channel_map->{$channel} } ) {
            # Check syntax of filename
            if ( $file->relative($log_dir) =~ /^(?:.+)_(\d{8})\.log(?:\.gz)?$/ ) {
                my $date = $1;
                my $channel_utf8 = decode($file_encoding, $channel);
                if ( defined $date_requested ) {
                    next unless $date =~ m/$re_date_req/;
                }
                push @filenames, {
                    'channel'    => $channel,
                    'date'       => $date,
                    'file'       => $file,
                };
            }
            else {
                say STDERR "File not matching pattern: $file";
            }
        }
    }
    return sort { $a->{'date'} cmp $b->{'date'} }
           sort { $a->{'channel'} cmp $b->{'channel'} }
           @filenames;
}

# Convert binary input in $file_encoding to binary output $term_encoding
sub to_terminal {
    my ($str, $input_encoding) = @_;
    $input_encoding ||= $file_encoding;
    return encode( $term_encoding, decode( $input_encoding, $str ) );
}

# Render contents of log file with date and channel name prefixed
# Returns array of log lines
sub render_log_file {
    my ($entry) = @_;
    my $file = $entry->{'file'};
    my $channel = $entry->{'channel'};
    my $date = $entry->{'date'};
    return "" unless -r $file;
    my $fh = $file->openr();
    # On-the-fly decompress files if extension is .gz
    if ( $entry->{'file'} =~ m/\.gz$/ ) {
        $fh = IO::Uncompress::Gunzip->new($fh, AutoClose => 1);
    }
    my @log_lines;
    while( my $line = <$fh> ) {
        chomp $line;
        next if $line =~ /\Q***\E (?:Quits|Joins|Parts):/;
        next if $line =~ /\Q***\E .* (?:sets mode|is now known as)/;

        # Generate proper timestamp from line + date
        my $timestamp = $date;
        if ( $line =~ s/^ \[ (\d{2}) : (\d{2}) : (\d{2}) \] (.*) $/$4/x ) {
            $timestamp = $date . "-" . $1 . $2 . $3;
        }

        # Get rid of whitespace at start and end of line
        $line =~ s/^\s*(.*?)\s*$/$1/;

        # Decode channel name
        my $channel_utf8 = decode($file_encoding, $channel);

        # First try to decode as UTF8 strict, then try file encoding if it failed
        my $line_utf8 = "";
        eval { $line_utf8 = decode('utf-8', $line, Encode::FB_CROAK); };
        $line_utf8 = decode($file_encoding, $line) if $@;

        push @log_lines, {
            timestamp => $timestamp,
            channel   => $channel_utf8,
            message   => $line_utf8,
        };
    }
    return @log_lines;
}
